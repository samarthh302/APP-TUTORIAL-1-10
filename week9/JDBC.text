private void initializeDatabase() {
    try {
        HikariConfig config = new HikariConfig();
        config.setJdbcUrl("jdbc:h2:./data/newsvisualizer;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE");
        config.setUsername("sa");
        config.setPassword("");
        config.setMaximumPoolSize(10);
        config.setConnectionTimeout(30000);
        config.setIdleTimeout(600000);
        config.setMaxLifetime(1800000);
        
        // H2 specific settings
        config.addDataSourceProperty("cachePrepStmts", "true");
        config.addDataSourceProperty("prepStmtCacheSize", "250");
        config.addDataSourceProperty("prepStmtCacheSqlLimit", "2048");
        
        this.dataSource = new HikariDataSource(config);
        
        logger.info("Database initialized successfully");
    } catch (Exception e) {
        logger.error("Failed to initialize database", e);
        throw new RuntimeException("Database initialization failed", e);
    }
}

public User createUser(User user) throws SQLException {
    String sql = "INSERT INTO users (username, email, password_hash, first_name, last_name, created_at) VALUES (?, ?, ?, ?, ?, ?)";
    
    try (Connection conn = dataSource.getConnection();
         PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
        
        stmt.setString(1, user.getUsername());
        stmt.setString(2, user.getEmail());
        stmt.setString(3, user.getPasswordHash());
        stmt.setString(4, user.getFirstName());
        stmt.setString(5, user.getLastName());
        stmt.setTimestamp(6, Timestamp.valueOf(user.getCreatedAt()));
        
        int rowsAffected = stmt.executeUpdate();
        if (rowsAffected > 0) {
            try (ResultSet rs = stmt.getGeneratedKeys()) {
                if (rs.next()) {
                    user.setId(rs.getLong(1));
                    logger.info("User created successfully: {}", user.getUsername());
                    return user;
                }
            }
        }
        
        throw new SQLException("Failed to create user");
    }
}

//•  The app uses HikariCP (a JDBC connection pool) configured to an H2 file database at ./data/newsvisualizer via a standard JDBC URL.
•  Every DB operation gets a Connection from the pool, uses PreparedStatement with parameters (prevents SQL injection), executes, and reads ResultSet if needed.
•  try-with-resources ensures Connection/Statement/ResultSet are closed automatically, returning the connection to the pool.
